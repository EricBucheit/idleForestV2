{"ast":null,"code":"import { homeImages, buttons, mapAtlas } from '../../../../../Images';\nimport Render from '../../Render';\nimport Bank from \"./Bank\";\nimport Menu from './Menu';\nimport { randomInt, Timer, canvasMapOffset, canvasEntityOffset } from '../../../Helpers';\nexport default class Home {\n  constructor() {\n    this.render = new Render();\n    this.floor = false;\n    this.bank = new Bank();\n    this.menu = new Menu();\n    this.pos = {\n      chest: {\n        x: 32,\n        y: 32 * 4\n      },\n      anvil: {\n        x: 32,\n        y: 32 * 8\n      },\n      stove: {\n        x: 32,\n        y: 32 * 10\n      },\n      bed: {\n        x: 32 * 8,\n        y: 32 * 10\n      },\n      table: {\n        x: 32 * 8,\n        y: 32 * 5\n      },\n      waterWell: {\n        x: 240,\n        y: 80,\n        index: 0,\n        timer: Timer(2000),\n        reverse: false,\n        next: function () {\n          if (this.timer.check()) this.reverse ? this.index-- : this.index++;\n\n          if (this.index >= 2) {\n            this.reverse = true;\n          }\n\n          if (this.index < 1) {\n            this.reverse = false;\n          }\n        }\n      }\n    };\n  }\n\n  draw(canvas, map, player) {\n    this.level(canvas, map, player);\n    this.drawWalls(canvas, player);\n    this.drawChest(canvas, player);\n    this.drawAnvil(canvas, player);\n    this.drawStove(canvas, player);\n    this.drawBed(canvas, player);\n    this.drawTable(canvas, player);\n    this.drawWaterWell(canvas, player);\n  }\n\n  createFloor(map) {\n    if (map) {\n      this.floor = [];\n      let level = map.body;\n\n      for (let x = level.pos.x; x <= level.size.x; x++) {\n        this.floor[x] = [];\n\n        for (let y = level.pos.y; y <= level.size.y; y++) {\n          if (x < 10 || x > 20 || y <= 10 || y >= 23) {\n            this.floor[x][y] = mapAtlas.terrain.grass.light.base.main;\n          } else {\n            this.floor[x][y] = homeImages.floor.panels[randomInt(0, 4)];\n          }\n        }\n      }\n    }\n  }\n\n  drawWalls(canvas, player) {\n    for (var x = 0; x <= 11; x++) {\n      let leftWallOffset = canvasEntityOffset(player, 0, x * 33, canvas);\n      let rightWallOffset = canvasEntityOffset(player, 328, x * 33, canvas);\n      this.render.img(homeImages.walls.vertical, leftWallOffset.x, leftWallOffset.y, 32, 32, canvas.ctx);\n      this.render.img(homeImages.walls.vertical, rightWallOffset.x, rightWallOffset.y, 32, 32, canvas.ctx);\n    }\n\n    for (x = 0; x <= 10; x++) {\n      if (x === 5 || x === 4 || x === 6) {\n        continue;\n      }\n\n      let topWallOffset = canvasEntityOffset(player, x * 33, 0, canvas);\n      let bottomWallOffset = canvasEntityOffset(player, x * 33, 400, canvas);\n      this.render.img(homeImages.walls.horizontal, topWallOffset.x, topWallOffset.y, 32, 32, canvas.ctx);\n      this.render.img(homeImages.walls.horizontal, bottomWallOffset.x, bottomWallOffset.y, 32, 32, canvas.ctx);\n    }\n  }\n\n  drawChest(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.chest.x, this.pos.chest.y, canvas);\n    this.render.img(homeImages.chest.open, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawAnvil(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.anvil.x, this.pos.anvil.y, canvas);\n    this.render.img(homeImages.craft.anvil, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawStove(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.stove.x, this.pos.stove.y, canvas);\n    this.render.img(homeImages.craft.stove, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawBed(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.bed.x, this.pos.bed.y, canvas);\n    this.render.img(homeImages.bed.vertical, offset.x, offset.y, 32, 64, canvas.ctx);\n  }\n\n  drawTable(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.table.x, this.pos.table.y, canvas);\n    this.render.img(homeImages.table, offset.x, offset.y, 32, 64, canvas.ctx);\n  }\n\n  drawWaterWell(canvas, player) {\n    let x_start = this.pos.waterWell.x;\n    let y_start = this.pos.waterWell.y;\n    let offset = canvasEntityOffset(player, this.pos.waterWell.x, this.pos.waterWell.y, canvas);\n    let main = homeImages.well.base.main;\n    let arms = homeImages.well.arms;\n    let emptyBucket = homeImages.well.bucket.empty;\n    let frontLayer = homeImages.well.base.frontLayer;\n    let handles = [homeImages.well.handles.one, homeImages.well.handles.two, homeImages.well.handles.three];\n    this.render.img(main, offset.x, offset.y, main.pos.width, main.pos.height, canvas.ctx);\n    this.render.img(arms, offset.x - 13, offset.y - 35, arms.pos.width, arms.pos.height, canvas.ctx);\n    this.render.img(emptyBucket, offset.x + 20, offset.y - 30 + this.pos.waterWell.index * 9.5, emptyBucket.pos.width, emptyBucket.pos.height - this.pos.waterWell.index * 5, canvas.ctx);\n    this.render.img(frontLayer, offset.x, offset.y + 15, frontLayer.pos.width, frontLayer.pos.height, canvas.ctx);\n    this.render.img(handles[this.pos.waterWell.index], offset.x + 64, offset.y - 42, handles[this.pos.waterWell.index].pos.width, handles[this.pos.waterWell.index].pos.height, canvas.ctx);\n    let button_x = 247;\n    let button_y = 36;\n    offset = canvasEntityOffset(player, button_x, button_y, canvas);\n    this.render.img(buttons.aquaButton, offset.x, offset.y, 50, 25, canvas.ctx);\n    this.render.text(\"Upgrade\", offset.x + 7, offset.y + 14, \"9\", canvas.ctx);\n    this.pos.waterWell.next();\n  }\n\n  level(canvas, map, player) {\n    if (map) {\n      if (!this.floor) {\n        this.createFloor(map);\n      }\n\n      let level = map.body;\n\n      for (let x = level.pos.x; x < level.size.x; x++) {\n        for (let y = level.pos.y; y < level.size.y; y++) {\n          let offset = canvasMapOffset(player, x, y, canvas);\n          this.render.img(this.floor[x][y], offset.x, offset.y, canvas.width * 0.1, canvas.height * 0.1, canvas.ctx);\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/Draw/Level/Home/index.js"],"names":["homeImages","buttons","mapAtlas","Render","Bank","Menu","randomInt","Timer","canvasMapOffset","canvasEntityOffset","Home","constructor","render","floor","bank","menu","pos","chest","x","y","anvil","stove","bed","table","waterWell","index","timer","reverse","next","check","draw","canvas","map","player","level","drawWalls","drawChest","drawAnvil","drawStove","drawBed","drawTable","drawWaterWell","createFloor","body","size","terrain","grass","light","base","main","panels","leftWallOffset","rightWallOffset","img","walls","vertical","ctx","topWallOffset","bottomWallOffset","horizontal","offset","open","craft","x_start","y_start","well","arms","emptyBucket","bucket","empty","frontLayer","handles","one","two","three","width","height","button_x","button_y","aquaButton","text"],"mappings":"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","sourcesContent":["import {homeImages, buttons, mapAtlas} from '../../../../../Images'\nimport Render from '../../Render'\nimport Bank from \"./Bank\"\nimport Menu from './Menu'\nimport {randomInt, Timer, canvasMapOffset, canvasEntityOffset} from '../../../Helpers'\n\nexport default class Home {\n\tconstructor() {\n\t\tthis.render = new Render();\n\t\tthis.floor = false;\n\t\tthis.bank = new Bank();\n\t\tthis.menu = new Menu();\n\t\tthis.pos = {\n\t\t\tchest : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 4,\n\t\t\t},\n\t\t\tanvil : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 8,\n\t\t\t},\n\t\t\tstove : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 10,\n\t\t\t},\n\t\t\tbed : {\n\t\t\t\tx: 32 * 8,\n\t\t\t\ty: 32 * 10,\n\t\t\t},\n\t\t\ttable : {\n\t\t\t\tx: 32 * 8,\n\t\t\t\ty: 32 * 5,\n\t\t\t},\n\t\t\twaterWell : {\n\t\t\t\tx: 240,\n\t\t\t\ty: 80,\n\t\t\t\tindex : 0,\n\t\t\t\ttimer: Timer(2000),\n\t\t\t\treverse: false,\n\t\t\t\tnext : function() {\n\t\t\t\t\tif (this.timer.check()) this.reverse ? this.index-- : this.index++\n\t\t\t\t\tif (this.index >= 2) {\n\t\t\t\t\t\tthis.reverse = true\n\t\t\t\t\t}\n\t\t\t\t\tif (this.index < 1) {\n\t\t\t\t\t\tthis.reverse = false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t}\n\n\tdraw(canvas, map, player) {\n\t\tthis.level(canvas, map, player);\n\t\tthis.drawWalls(canvas, player)\n\t\tthis.drawChest(canvas, player)\n\t\tthis.drawAnvil(canvas, player)\n\t\tthis.drawStove(canvas, player)\n\t\tthis.drawBed(canvas, player);\n\t\tthis.drawTable(canvas, player)\n\t\tthis.drawWaterWell(canvas, player)\n\t}\n\n\tcreateFloor(map) {\n\t\tif (map) {\n\t\t\tthis.floor = []\n\t\t\tlet level = map.body;\n\t \t\tfor (let x = level.pos.x; x <= level.size.x; x++) {\n\t \t\t\tthis.floor[x] = [];\n\t            for (let y = level.pos.y; y <= level.size.y; y++) {\n\t            \tif(x < 10 || x > 20 || y <= 10 || y >= 23) {\n\t            \t\tthis.floor[x][y] = mapAtlas.terrain.grass.light.base.main\n\t            \t} else {\n\t            \t\tthis.floor[x][y] = homeImages.floor.panels[randomInt(0,4)]\n\n\t            \t}\n\t            }\n\t        }\n\t\t}\n\t}\n\n\tdrawWalls(canvas, player) {\n\n        for (var x = 0; x <= 11; x++) {\n        \tlet leftWallOffset = canvasEntityOffset(player, 0, x * 33, canvas);\n        \tlet rightWallOffset = canvasEntityOffset(player, 328, x * 33, canvas);\n\n        \tthis.render.img(homeImages.walls.vertical, leftWallOffset.x, leftWallOffset.y, 32, 32, canvas.ctx)\n        \tthis.render.img(homeImages.walls.vertical, rightWallOffset.x, rightWallOffset.y, 32, 32, canvas.ctx)\n        }\n\n        for (x = 0; x <= 10; x++) {\n        \tif (x === 5 || x === 4 || x === 6) {\n        \t\tcontinue\n        \t}\n        \tlet topWallOffset = canvasEntityOffset(player, x * 33, 0, canvas);\n        \tlet bottomWallOffset = canvasEntityOffset(player, x * 33, 400, canvas);\n\n        \tthis.render.img(homeImages.walls.horizontal, topWallOffset.x, topWallOffset.y, 32, 32, canvas.ctx)\n       \t\tthis.render.img(homeImages.walls.horizontal, bottomWallOffset.x, bottomWallOffset.y, 32, 32, canvas.ctx)\n        }\n\t}\n\n\n\tdrawChest(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.chest.x, this.pos.chest.y, canvas);\n\t\tthis.render.img(homeImages.chest.open, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawAnvil(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.anvil.x, this.pos.anvil.y, canvas);\n\t\tthis.render.img(homeImages.craft.anvil, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawStove(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.stove.x, this.pos.stove.y, canvas);\n\t\tthis.render.img(homeImages.craft.stove, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawBed(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.bed.x, this.pos.bed.y, canvas);\n\t\tthis.render.img(homeImages.bed.vertical, offset.x, offset.y, 32, 64, canvas.ctx)\n\t}\n\n\tdrawTable(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.table.x, this.pos.table.y, canvas);\n\t\tthis.render.img(homeImages.table, offset.x, offset.y, 32, 64, canvas.ctx)\n\t}\n\n\tdrawWaterWell(canvas, player) {\n\t\tlet x_start = this.pos.waterWell.x;\n\t\tlet y_start = this.pos.waterWell.y\n\t\tlet offset = canvasEntityOffset(player, this.pos.waterWell.x, this.pos.waterWell.y, canvas)\n\t\tlet main = homeImages.well.base.main;\n\t\tlet arms = homeImages.well.arms;\n\t\tlet emptyBucket = homeImages.well.bucket.empty;\n\t\tlet frontLayer = homeImages.well.base.frontLayer;\n\t\tlet handles = [\n\t\t\t\t\t\thomeImages.well.handles.one,\n\t\t\t\t\t\thomeImages.well.handles.two,\n\t\t\t\t\t\thomeImages.well.handles.three\n\t\t\t\t\t\t];\n\n\t\tthis.render.img(main, offset.x, offset.y, main.pos.width , main.pos.height ,canvas.ctx)\n\t\tthis.render.img(arms, offset.x - 13, offset.y - 35, arms.pos.width, arms.pos.height,canvas.ctx)\n\t\tthis.render.img(emptyBucket, offset.x + 20, (offset.y - 30) + (this.pos.waterWell.index * 9.5), emptyBucket.pos.width , emptyBucket.pos.height -(this.pos.waterWell.index * 5)  , canvas.ctx)\n\t\tthis.render.img(frontLayer, offset.x, offset.y + 15, frontLayer.pos.width, frontLayer.pos.height, canvas.ctx)\n\t\tthis.render.img(handles[this.pos.waterWell.index], offset.x + 64, offset.y - 42, handles[this.pos.waterWell.index].pos.width,handles[this.pos.waterWell.index].pos.height, canvas.ctx)\n\t\t\n\t\tlet button_x = 247;\n\t\tlet button_y = 36;\n\t\toffset = canvasEntityOffset(player, button_x, button_y, canvas)\n\n\t\tthis.render.img(buttons.aquaButton, offset.x, offset.y, 50, 25,canvas.ctx)\n\t\tthis.render.text(\"Upgrade\", offset.x + 7, offset.y + 14, \"9\" , canvas.ctx)\n\t\tthis.pos.waterWell.next();\n\t}\n\n\n\tlevel(canvas, map, player) {\n        if (map) {\n        \tif (!this.floor) {\n        \t\tthis.createFloor(map);\n        \t}\n            let level = map.body;\n            for (let x = level.pos.x; x < level.size.x; x++) {\n                for (let y = level.pos.y; y < level.size.y; y++) {\n                \tlet offset = canvasMapOffset(player, x, y, canvas)\n                    this.render.img(this.floor[x][y], offset.x, offset.y, canvas.width * 0.1, canvas.height * 0.1, canvas.ctx)\n                }\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}