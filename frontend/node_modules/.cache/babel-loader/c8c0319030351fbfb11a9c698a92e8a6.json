{"ast":null,"code":"import { homeImages, buttons } from '../../../../../Images';\nimport Render from '../../Render';\nimport Bank from \"./Bank\";\nimport Menu from './Menu';\nimport { randomInt, Timer, canvasMapOffset, canvasEntityOffset } from '../../../Helpers';\nexport default class Home {\n  constructor() {\n    this.render = new Render();\n    this.floor = false;\n    this.bank = new Bank();\n    this.menu = new Menu();\n    this.pos = {\n      chest: {\n        x: 32,\n        y: 32 * 4\n      },\n      anvil: {\n        x: 32,\n        y: 32 * 8\n      },\n      stove: {\n        x: 32,\n        y: 32 * 10\n      },\n      bed: {\n        x: 32 * 8,\n        y: 32 * 10\n      },\n      table: {\n        x: 32 * 8,\n        y: 32 * 5\n      },\n      waterWell: {\n        x: 240,\n        y: 80,\n        index: 0,\n        timer: Timer(2000),\n        reverse: false,\n        next: function () {\n          if (this.timer.check()) this.reverse ? this.index-- : this.index++;\n\n          if (this.index >= 2) {\n            this.reverse = true;\n          }\n\n          if (this.index < 1) {\n            this.reverse = false;\n          }\n        }\n      }\n    };\n  }\n\n  draw(canvas, map, player) {\n    this.level(canvas, map, player);\n    this.drawWalls(canvas, player);\n    this.drawChest(canvas, player);\n    this.drawAnvil(canvas, player);\n    this.drawStove(canvas, player);\n    this.drawBed(canvas, player);\n    this.drawTable(canvas, player);\n    this.drawWaterWell(canvas, player);\n  }\n\n  createFloor(map) {\n    if (map) {\n      this.floor = [];\n      let level = map.body;\n\n      for (let x = level.pos.x; x <= level.size.x; x++) {\n        this.floor[x] = [];\n\n        for (let y = level.pos.y; y <= level.size.y; y++) {\n          this.floor[x][y] = homeImages.floor.panels[randomInt(0, 4)];\n        }\n      }\n    }\n  }\n\n  drawWalls(canvas, player) {\n    for (var x = 0; x <= 11; x++) {\n      let leftWallOffset = canvasEntityOffset(player, -200, x * 33, canvas);\n      let rightWallOffset = canvasEntityOffset(player, 328, x * 33, canvas);\n      this.render.img(homeImages.walls.vertical, leftWallOffset.x, leftWallOffset.y, 32, 32, canvas.ctx);\n      this.render.img(homeImages.walls.vertical, rightWallOffset.x, rightWallOffset.y, 32, 32, canvas.ctx);\n    }\n\n    for (x = 0; x <= 10; x++) {\n      if (x === 5 || x === 4 || x === 6) {\n        continue;\n      }\n\n      let topWallOffset = canvasEntityOffset(player, x * 33, 0, canvas);\n      let bottomWallOffset = canvasEntityOffset(player, x * 33, 400, canvas);\n      this.render.img(homeImages.walls.horizontal, topWallOffset.x, topWallOffset.y, 32, 32, canvas.ctx);\n      this.render.img(homeImages.walls.horizontal, bottomWallOffset.x, bottomWallOffset.y, 32, 32, canvas.ctx);\n    }\n  }\n\n  drawChest(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.chest.x, this.pos.chest.y, canvas);\n    this.render.img(homeImages.chest.open, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawAnvil(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.anvil.x, this.pos.anvil.y, canvas);\n    this.render.img(homeImages.craft.anvil, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawStove(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.stove.x, this.pos.stove.y, canvas);\n    this.render.img(homeImages.craft.stove, offset.x, offset.y, 32, 32, canvas.ctx);\n  }\n\n  drawBed(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.bed.x, this.pos.bed.y, canvas);\n    this.render.img(homeImages.bed.vertical, offset.x, offset.y, 32, 64, canvas.ctx);\n  }\n\n  drawTable(canvas, player) {\n    let offset = canvasEntityOffset(player, this.pos.table.x, this.pos.table.y, canvas);\n    this.render.img(homeImages.table, offset.x, offset.y, 32, 64, canvas.ctx);\n  }\n\n  drawWaterWell(canvas, player) {\n    let x_start = this.pos.waterWell.x;\n    let y_start = this.pos.waterWell.y;\n    let offset = canvasEntityOffset(player, this.pos.waterWell.x, this.pos.waterWell.y, canvas);\n    let main = homeImages.well.base.main;\n    let arms = homeImages.well.arms;\n    let emptyBucket = homeImages.well.bucket.empty;\n    let frontLayer = homeImages.well.base.frontLayer;\n    let handles = [homeImages.well.handles.one, homeImages.well.handles.two, homeImages.well.handles.three];\n    this.render.img(main, offset.x, offset.y, main.pos.width, main.pos.height, canvas.ctx);\n    this.render.img(arms, offset.x - 13, offset.y - 35, arms.pos.width, arms.pos.height, canvas.ctx);\n    this.render.img(emptyBucket, offset.x + 20, offset.y - 30 + this.pos.waterWell.index * 9.5, emptyBucket.pos.width, emptyBucket.pos.height - this.pos.waterWell.index * 5, canvas.ctx);\n    this.render.img(frontLayer, offset.x, offset.y + 15, frontLayer.pos.width, frontLayer.pos.height, canvas.ctx);\n    this.render.img(handles[this.pos.waterWell.index], offset.x + 64, offset.y - 42, handles[this.pos.waterWell.index].pos.width, handles[this.pos.waterWell.index].pos.height, canvas.ctx);\n    let button_x = 247;\n    let button_y = 36;\n    this.render.img(buttons.aquaButton, button_x, button_y, 50, 25, canvas.ctx);\n    this.render.text(\"Upgrade\", button_x + 7, button_y + 14, \"9\", canvas.ctx);\n    this.pos.waterWell.next();\n  }\n\n  level(canvas, map, player) {\n    if (map) {\n      if (!this.floor) {\n        this.createFloor(map);\n      }\n\n      let level = map.body;\n\n      for (let x = level.pos.x; x < level.size.x; x++) {\n        for (let y = level.pos.y; y < level.size.y; y++) {\n          let offset = canvasMapOffset(player, x, y, canvas);\n          this.render.img(this.floor[x][y], offset.x, offset.y, 32, 32, canvas.ctx);\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/Draw/Level/Home/index.js"],"names":["homeImages","buttons","Render","Bank","Menu","randomInt","Timer","canvasMapOffset","canvasEntityOffset","Home","constructor","render","floor","bank","menu","pos","chest","x","y","anvil","stove","bed","table","waterWell","index","timer","reverse","next","check","draw","canvas","map","player","level","drawWalls","drawChest","drawAnvil","drawStove","drawBed","drawTable","drawWaterWell","createFloor","body","size","panels","leftWallOffset","rightWallOffset","img","walls","vertical","ctx","topWallOffset","bottomWallOffset","horizontal","offset","open","craft","x_start","y_start","main","well","base","arms","emptyBucket","bucket","empty","frontLayer","handles","one","two","three","width","height","button_x","button_y","aquaButton","text"],"mappings":"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","sourcesContent":["import {homeImages, buttons} from '../../../../../Images'\nimport Render from '../../Render'\nimport Bank from \"./Bank\"\nimport Menu from './Menu'\nimport {randomInt, Timer, canvasMapOffset, canvasEntityOffset} from '../../../Helpers'\n\nexport default class Home {\n\tconstructor() {\n\t\tthis.render = new Render();\n\t\tthis.floor = false;\n\t\tthis.bank = new Bank();\n\t\tthis.menu = new Menu();\n\t\tthis.pos = {\n\t\t\tchest : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 4,\n\t\t\t},\n\t\t\tanvil : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 8,\n\t\t\t},\n\t\t\tstove : {\n\t\t\t\tx: 32,\n\t\t\t\ty: 32 * 10,\n\t\t\t},\n\t\t\tbed : {\n\t\t\t\tx: 32 * 8,\n\t\t\t\ty: 32 * 10,\n\t\t\t},\n\t\t\ttable : {\n\t\t\t\tx: 32 * 8,\n\t\t\t\ty: 32 * 5,\n\t\t\t},\n\t\t\twaterWell : {\n\t\t\t\tx: 240,\n\t\t\t\ty: 80,\n\t\t\t\tindex : 0,\n\t\t\t\ttimer: Timer(2000),\n\t\t\t\treverse: false,\n\t\t\t\tnext : function() {\n\t\t\t\t\tif (this.timer.check()) this.reverse ? this.index-- : this.index++\n\t\t\t\t\tif (this.index >= 2) {\n\t\t\t\t\t\tthis.reverse = true\n\t\t\t\t\t}\n\t\t\t\t\tif (this.index < 1) {\n\t\t\t\t\t\tthis.reverse = false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t}\n\n\tdraw(canvas, map, player) {\n\t\tthis.level(canvas, map, player);\n\t\tthis.drawWalls(canvas, player)\n\t\tthis.drawChest(canvas, player)\n\t\tthis.drawAnvil(canvas, player)\n\t\tthis.drawStove(canvas, player)\n\t\tthis.drawBed(canvas, player);\n\t\tthis.drawTable(canvas, player)\n\t\tthis.drawWaterWell(canvas, player)\n\t}\n\n\tcreateFloor(map) {\n\t\tif (map) {\n\t\t\tthis.floor = []\n\t\t\tlet level = map.body;\n\t \t\tfor (let x = level.pos.x; x <= level.size.x; x++) {\n\t \t\t\tthis.floor[x] = [];\n\t            for (let y = level.pos.y; y <= level.size.y; y++) {\n\t            \tthis.floor[x][y] = homeImages.floor.panels[randomInt(0,4)]\n\t            }\n\t        }\n\t\t}\n\t}\n\n\tdrawWalls(canvas, player) {\n\n        for (var x = 0; x <= 11; x++) {\n        \tlet leftWallOffset = canvasEntityOffset(player, -200, x * 33, canvas);\n        \tlet rightWallOffset = canvasEntityOffset(player, 328, x * 33, canvas);\n\n        \tthis.render.img(homeImages.walls.vertical, leftWallOffset.x, leftWallOffset.y, 32, 32, canvas.ctx)\n        \tthis.render.img(homeImages.walls.vertical, rightWallOffset.x, rightWallOffset.y, 32, 32, canvas.ctx)\n        }\n\n        for (x = 0; x <= 10; x++) {\n        \tif (x === 5 || x === 4 || x === 6) {\n        \t\tcontinue\n        \t}\n        \tlet topWallOffset = canvasEntityOffset(player, x * 33, 0, canvas);\n        \tlet bottomWallOffset = canvasEntityOffset(player, x * 33, 400, canvas);\n\n        \tthis.render.img(homeImages.walls.horizontal, topWallOffset.x, topWallOffset.y, 32, 32, canvas.ctx)\n       \t\tthis.render.img(homeImages.walls.horizontal, bottomWallOffset.x, bottomWallOffset.y, 32, 32, canvas.ctx)\n        }\n\t}\n\n\n\tdrawChest(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.chest.x, this.pos.chest.y, canvas);\n\t\tthis.render.img(homeImages.chest.open, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawAnvil(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.anvil.x, this.pos.anvil.y, canvas);\n\t\tthis.render.img(homeImages.craft.anvil, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawStove(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.stove.x, this.pos.stove.y, canvas);\n\t\tthis.render.img(homeImages.craft.stove, offset.x, offset.y, 32, 32, canvas.ctx)\n\t}\n\n\n\tdrawBed(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.bed.x, this.pos.bed.y, canvas);\n\t\tthis.render.img(homeImages.bed.vertical, offset.x, offset.y, 32, 64, canvas.ctx)\n\t}\n\n\tdrawTable(canvas, player) {\n\t\tlet offset = canvasEntityOffset(player, this.pos.table.x, this.pos.table.y, canvas);\n\t\tthis.render.img(homeImages.table, offset.x, offset.y, 32, 64, canvas.ctx)\n\t}\n\n\tdrawWaterWell(canvas, player) {\n\t\tlet x_start = this.pos.waterWell.x;\n\t\tlet y_start = this.pos.waterWell.y\n\t\tlet offset = canvasEntityOffset(player, this.pos.waterWell.x, this.pos.waterWell.y, canvas)\n\t\tlet main = homeImages.well.base.main;\n\t\tlet arms = homeImages.well.arms;\n\t\tlet emptyBucket = homeImages.well.bucket.empty;\n\t\tlet frontLayer = homeImages.well.base.frontLayer;\n\t\tlet handles = [\n\t\t\t\t\t\thomeImages.well.handles.one,\n\t\t\t\t\t\thomeImages.well.handles.two,\n\t\t\t\t\t\thomeImages.well.handles.three\n\t\t\t\t\t\t];\n\n\t\tthis.render.img(main, offset.x, offset.y, main.pos.width , main.pos.height ,canvas.ctx)\n\t\tthis.render.img(arms, offset.x - 13, offset.y - 35, arms.pos.width, arms.pos.height,canvas.ctx)\n\t\tthis.render.img(emptyBucket, offset.x + 20, (offset.y - 30) + (this.pos.waterWell.index * 9.5), emptyBucket.pos.width , emptyBucket.pos.height -(this.pos.waterWell.index * 5)  , canvas.ctx)\n\t\tthis.render.img(frontLayer, offset.x, offset.y + 15, frontLayer.pos.width, frontLayer.pos.height, canvas.ctx)\n\t\tthis.render.img(handles[this.pos.waterWell.index], offset.x + 64, offset.y - 42, handles[this.pos.waterWell.index].pos.width,handles[this.pos.waterWell.index].pos.height, canvas.ctx)\n\t\t\n\t\tlet button_x = 247;\n\t\tlet button_y = 36;\n\n\t\tthis.render.img(buttons.aquaButton, button_x, button_y, 50, 25,canvas.ctx)\n\t\tthis.render.text(\"Upgrade\", button_x + 7, button_y + 14, \"9\" , canvas.ctx)\n\t\tthis.pos.waterWell.next();\n\t}\n\n\n\tlevel(canvas, map, player) {\n        if (map) {\n        \tif (!this.floor) {\n        \t\tthis.createFloor(map);\n        \t}\n            let level = map.body;\n            for (let x = level.pos.x; x < level.size.x; x++) {\n                for (let y = level.pos.y; y < level.size.y; y++) {\n                \tlet offset = canvasMapOffset(player, x, y, canvas)\n\n                    this.render.img(this.floor[x][y], offset.x, offset.y, 32, 32, canvas.ctx)\n                }\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}