{"ast":null,"code":"import healthBar from \"../../Images/images/UI/healthBars/healthBar.png\";\nimport emptyBar from \"../../Images/images/UI/healthBars/emptyBar.png\";\nimport Render from '../Canvas/Draw/Render';\nvar loadedImages = 0;\nlet statusBar = {\n  health: {\n    img: singleImage(healthBar),\n    pos: mapTile(0, 0, 206, 28)\n  },\n  empty: {\n    img: singleImage(emptyBar),\n    pos: mapTile(0, 0, 206, 28)\n  }\n};\n\nfunction scale(value, x1, y1, x2, y2) {\n  return (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n}\n\nfunction mapTile(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n\nfunction singleImage(img) {\n  let image = new Image();\n  image.src = img;\n\n  image.onload = function () {\n    loadedImages++;\n    console.log(loadedImages);\n  };\n\n  return image;\n}\n\nexport default class LoadBar {\n  constructor() {\n    this.render = new Render();\n    this.loaded = false;\n  }\n\n  draw(canvas) {\n    this.Render.img(statusBar.empty, 100, 0, 50, 15, canvas.ctx);\n    let scaledLoadBar = this.scale(loadedImages, 0, 3085, 0, 50);\n    this.Render.img(statusBar.health, 100, 15, scaledLoadBar, 15, canvas.ctx);\n  }\n\n}\nexport { singleImage };","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/idleForestV2/frontend/src/Components/LoadBar/index.js"],"names":["healthBar","emptyBar","Render","loadedImages","statusBar","health","img","singleImage","pos","mapTile","empty","scale","value","x1","y1","x2","y2","x","y","width","height","image","Image","src","onload","console","log","LoadBar","constructor","render","loaded","draw","canvas","ctx","scaledLoadBar"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iDAAtB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,IAAIC,YAAY,GAAG,CAAnB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE;AACJC,IAAAA,GAAG,EAAGC,WAAW,CAACP,SAAD,CADb;AAEJQ,IAAAA,GAAG,EAAGC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,EAAZ;AAFT,GADI;AAMZC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,GAAG,EAAGC,WAAW,CAACN,QAAD,CADd;AAEHO,IAAAA,GAAG,EAAGC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,EAAZ;AAFV;AANK,CAAhB;;AAYA,SAASE,KAAT,CAAeC,KAAf,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;AAC9B,SAAQ,CAACJ,KAAK,GAAGC,EAAT,KAAgBG,EAAE,GAAGD,EAArB,KAA4BD,EAAE,GAAGD,EAAjC,IAAuCE,EAA/C;AACP;;AAID,SAASN,OAAT,CAAiBQ,CAAjB,EAAmBC,CAAnB,EAAqBC,KAArB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAQ;AACJH,IAAAA,CAAC,EAACA,CADE;AAEJC,IAAAA,CAAC,EAACA,CAFE;AAGJC,IAAAA,KAAK,EAAGA,KAHJ;AAIJC,IAAAA,MAAM,EAAEA;AAJJ,GAAR;AAMH;;AAED,SAASb,WAAT,CAAqBD,GAArB,EAA0B;AACtB,MAAIe,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYjB,GAAZ;;AACAe,EAAAA,KAAK,CAACG,MAAN,GAAe,YAAW;AACtBrB,IAAAA,YAAY;AACZsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,YAAZ;AACH,GAHD;;AAIA,SAAOkB,KAAP;AACH;;AAED,eAAe,MAAMM,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,IAAI3B,MAAJ,EAAd;AACA,SAAK4B,MAAL,GAAc,KAAd;AACH;;AAEDC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACT,SAAK9B,MAAL,CAAYI,GAAZ,CAAgBF,SAAS,CAACM,KAA1B,EAAiC,GAAjC,EAAsC,CAAtC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiDsB,MAAM,CAACC,GAAxD;AACA,QAAIC,aAAa,GAAG,KAAKvB,KAAL,CAAWR,YAAX,EAAyB,CAAzB,EAA4B,IAA5B,EAAkC,CAAlC,EAAsC,EAAtC,CAApB;AACA,SAAKD,MAAL,CAAYI,GAAZ,CAAgBF,SAAS,CAACC,MAA1B,EAAkC,GAAlC,EAAuC,EAAvC,EAA2C6B,aAA3C,EAA0D,EAA1D,EAA8DF,MAAM,CAACC,GAArE;AAEH;;AAXwB;AAgB7B,SAAQ1B,WAAR","sourcesContent":["import healthBar from \"../../Images/images/UI/healthBars/healthBar.png\"\nimport emptyBar from \"../../Images/images/UI/healthBars/emptyBar.png\"\nimport Render from '../Canvas/Draw/Render'\n\nvar loadedImages = 0;\n\nlet statusBar = {\n    health: {\n        img : singleImage(healthBar),\n        pos : mapTile(0, 0, 206, 28) \n    },\n\n    empty: {\n        img : singleImage(emptyBar),\n        pos : mapTile(0, 0, 206, 28) \n    },\n}\n\nfunction scale(value, x1, y1, x2, y2) {\n        return ((value - x1) * (y2 - x2) / (y1 - x1) + x2)\n}\n\n\n\nfunction mapTile(x,y,width,height) {\n    return ({\n        x:x,\n        y:y,\n        width : width,\n        height: height,\n    })\n}\n\nfunction singleImage(img) {\n    let image = new Image();\n    image.src = img;\n    image.onload = function() {\n        loadedImages++;\n        console.log(loadedImages);\n    }\n    return image;\n}\n\nexport default class LoadBar {\n    constructor() {\n        this.render = new Render()\n        this.loaded = false;\n    }\n\n    draw(canvas) {\n        this.Render.img(statusBar.empty, 100, 0, 50, 15, canvas.ctx);\n        let scaledLoadBar = this.scale(loadedImages, 0, 3085, 0 , 50)\n        this.Render.img(statusBar.health, 100, 15, scaledLoadBar, 15, canvas.ctx);\n\n    }\n\n\n}\n\nexport {singleImage}\n"]},"metadata":{},"sourceType":"module"}