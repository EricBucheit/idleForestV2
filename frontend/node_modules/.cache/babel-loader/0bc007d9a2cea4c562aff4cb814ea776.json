{"ast":null,"code":"import Render from '../../Render';\nimport { background } from '../../../../../Images';\nexport default class Skills {\n  constructor() {\n    this.render = new Render();\n  }\n\n  draw(canvas, player) {\n    this.skillsBackground(canvas);\n    this.skills(canvas, player);\n  }\n\n  skills(canvas, player) {\n    if (!player) {\n      return false;\n    }\n\n    let x = 365;\n    let y = -10;\n    let skills = Object.keys(player.skills);\n\n    for (let skill of skills) {\n      let current_lvl = Math.ceil(player.skills[skill].current);\n      let value = player.skills[skill].value;\n      let boost = player.skills[skill].boost;\n      let xp = player.skills[skill].xp;\n      let next_level = player.skills[skill].threshold;\n      canvas.ctx.fillStyle = 'rgba(179, 0, 9,0.4)';\n      canvas.ctx.fillRect(360, y + 10, 120, 25);\n      this.render.textLine(`${skill} : ${current_lvl + boost}/${value}`, x, y += 20, 9, canvas.ctx, \"white\");\n      this.render.textLine(`XP: ${xp} / ${next_level}`, x + 30, y += 12, 9, canvas.ctx, \"white\");\n    }\n\n    this.render.textLine(`Current Level:${player.info.currentLevel}`, x, y += 40, 9, canvas.ctx, \"white\");\n    this.render.textLine(`Gold : ${player.info.gold}`, x, y += 20, 9, canvas.ctx, \"white\");\n  }\n\n  skillsBackground(canvas) {\n    this.render.img(background.skills, 360, 0, 120, 480, canvas.ctx);\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/idleForestV2/frontend/src/Components/Canvas/Draw/UI/Skills/index.js"],"names":["Render","background","Skills","constructor","render","draw","canvas","player","skillsBackground","skills","x","y","Object","keys","skill","current_lvl","Math","ceil","current","value","boost","xp","next_level","threshold","ctx","fillStyle","fillRect","textLine","info","currentLevel","gold","img"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AAEA,eAAe,MAAMC,MAAN,CAAa;AAC3BC,EAAAA,WAAW,GAAG;AACb,SAAKC,MAAL,GAAc,IAAIJ,MAAJ,EAAd;AACA;;AAEDK,EAAAA,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiB;AACpB,SAAKC,gBAAL,CAAsBF,MAAtB;AACA,SAAKG,MAAL,CAAYH,MAAZ,EAAoBC,MAApB;AACA;;AAEDE,EAAAA,MAAM,CAACH,MAAD,EAASC,MAAT,EAAiB;AACtB,QAAI,CAACA,MAAL,EAAa;AACZ,aAAO,KAAP;AACA;;AAED,QAAIG,CAAC,GAAG,GAAR;AACA,QAAIC,CAAC,GAAG,CAAC,EAAT;AAEA,QAAIF,MAAM,GAAGG,MAAM,CAACC,IAAP,CAAYN,MAAM,CAACE,MAAnB,CAAb;;AACA,SAAK,IAAIK,KAAT,IAAkBL,MAAlB,EAA0B;AACzB,UAAIM,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUV,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAqBI,OAA/B,CAAlB;AACA,UAAIC,KAAK,GAAGZ,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAqBK,KAAjC;AACA,UAAIC,KAAK,GAAGb,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAqBM,KAAjC;AACA,UAAIC,EAAE,GAAGd,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAqBO,EAA9B;AACA,UAAIC,UAAU,GAAGf,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAqBS,SAAtC;AAEAjB,MAAAA,MAAM,CAACkB,GAAP,CAAWC,SAAX,GAAuB,qBAAvB;AACAnB,MAAAA,MAAM,CAACkB,GAAP,CAAWE,QAAX,CAAoB,GAApB,EAAyBf,CAAC,GAAG,EAA7B,EAAgC,GAAhC,EAAoC,EAApC;AAEA,WAAKP,MAAL,CAAYuB,QAAZ,CAAsB,GAAEb,KAAM,MAAKC,WAAW,GAAGK,KAAM,IAAGD,KAAM,EAAhE,EAAmET,CAAnE,EAAsEC,CAAC,IAAI,EAA3E,EAA+E,CAA/E,EAAkFL,MAAM,CAACkB,GAAzF,EAA8F,OAA9F;AACA,WAAKpB,MAAL,CAAYuB,QAAZ,CAAsB,OAAMN,EAAG,MAAKC,UAAW,EAA/C,EAAkDZ,CAAC,GAAG,EAAtD,EAA0DC,CAAC,IAAI,EAA/D,EAAmE,CAAnE,EAAsEL,MAAM,CAACkB,GAA7E,EAAkF,OAAlF;AACA;;AAED,SAAKpB,MAAL,CAAYuB,QAAZ,CAAsB,iBAAgBpB,MAAM,CAACqB,IAAP,CAAYC,YAAa,EAA/D,EAAkEnB,CAAlE,EAAqEC,CAAC,IAAI,EAA1E,EAA8E,CAA9E,EAAiFL,MAAM,CAACkB,GAAxF,EAA6F,OAA7F;AACA,SAAKpB,MAAL,CAAYuB,QAAZ,CAAsB,UAASpB,MAAM,CAACqB,IAAP,CAAYE,IAAK,EAAhD,EAAmDpB,CAAnD,EAAsDC,CAAC,IAAI,EAA3D,EAA+D,CAA/D,EAAkEL,MAAM,CAACkB,GAAzE,EAA8E,OAA9E;AACA;;AAGDhB,EAAAA,gBAAgB,CAACF,MAAD,EAAS;AACxB,SAAKF,MAAL,CAAY2B,GAAZ,CAAgB9B,UAAU,CAACQ,MAA3B,EAAmC,GAAnC,EAAwC,CAAxC,EAA2C,GAA3C,EAAgD,GAAhD,EAAqDH,MAAM,CAACkB,GAA5D;AACA;;AAxC0B","sourcesContent":["import Render from '../../Render'\nimport {background} from '../../../../../Images'\n\nexport default class Skills {\n\tconstructor() {\n\t\tthis.render = new Render()\n\t}\n\n\tdraw(canvas, player) {\n\t\tthis.skillsBackground(canvas)\n\t\tthis.skills(canvas, player)\t\n\t}\n\n\tskills(canvas, player) {\n\t\tif (!player) {\n\t\t\treturn false\n\t\t}\n\t\t\n\t\tlet x = 365;\n\t\tlet y = -10;\n\n\t\tlet skills = Object.keys(player.skills)\n\t\tfor (let skill of skills) {\n\t\t\tlet current_lvl = Math.ceil(player.skills[skill].current)\n\t\t\tlet value = player.skills[skill].value;\n\t\t\tlet boost = player.skills[skill].boost;\n\t\t\tlet xp = player.skills[skill].xp;\n\t\t\tlet next_level = player.skills[skill].threshold;\n\n\t\t\tcanvas.ctx.fillStyle = 'rgba(179, 0, 9,0.4)';\n\t\t\tcanvas.ctx.fillRect(360, y + 10,120,25);\n\n\t\t\tthis.render.textLine(`${skill} : ${current_lvl + boost}/${value}`, x, y += 20, 9, canvas.ctx, \"white\");\n\t\t\tthis.render.textLine(`XP: ${xp} / ${next_level}`, x + 30, y += 12, 9, canvas.ctx, \"white\");\n\t\t}\n\n\t\tthis.render.textLine(`Current Level:${player.info.currentLevel}`, x, y += 40, 9, canvas.ctx, \"white\");\n\t\tthis.render.textLine(`Gold : ${player.info.gold}`, x, y += 20, 9, canvas.ctx, \"white\");\n\t}\n\n\n\tskillsBackground(canvas) {\n\t\tthis.render.img(background.skills, 360, 0, 120, 480, canvas.ctx)\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}