{"ast":null,"code":"export default class Render {\n  splitByNumber(str, size) {\n    const numChunks = Math.ceil(str.length / size);\n    const chunks = new Array(numChunks);\n\n    for (let i = 0, o = 0; i < numChunks; ++i, o += size) {\n      chunks[i] = str.substr(o, size);\n    }\n\n    return chunks;\n  }\n\n  text(str, x, y, size, ctx, color = \"white\") {\n    if (str.toString().length > 6 && parseInt(size) >= 10) {\n      x -= 6;\n    }\n\n    str = str.toString().split(' ');\n    ctx.strokeStyle = color;\n    ctx.font = size + \"px Comic Sans MS\";\n\n    for (let word in str) {\n      ctx.strokeText(str[word], x, y + word * 7);\n    }\n  }\n\n  textLine(str, x, y, size, ctx, color = \"white\") {\n    if (str.toString().length > 6 && parseInt(size) >= 10) {\n      x -= 6;\n    }\n\n    ctx.strokeStyle = color;\n    ctx.font = size + \"px Comic Sans MS\";\n    ctx.strokeText(str, x, y);\n  }\n\n  textLinesByLength(str, x, y, size, numToSplit, ctx, color = \"white\") {\n    let strChunks = this.splitByNumber(str, numToSplit);\n    ctx.strokeStyle = color;\n    ctx.font = size + \"px Comic Sans MS\";\n\n    for (let line in strChunks) {\n      console.log(str[line] + \" newline\");\n      ctx.strokeText(str[line], x, y);\n    }\n  }\n\n  img(img, x, y, width, height, ctx) {\n    ctx.drawImage(img.img, img.pos.x, img.pos.y, img.pos.width, img.pos.height, x, y, width, height);\n  }\n\n  roundRect(x, y, w, h, r, ctx) {\n    ctx.fillStyle = 'rgba(16, 133, 26,0.9)';\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/Draw/Render/index.js"],"names":["Render","splitByNumber","str","size","numChunks","Math","ceil","length","chunks","Array","i","o","substr","text","x","y","ctx","color","toString","parseInt","split","strokeStyle","font","word","strokeText","textLine","textLinesByLength","numToSplit","strChunks","line","console","log","img","width","height","drawImage","pos","roundRect","w","h","r","fillStyle","beginPath","moveTo","arcTo","closePath"],"mappings":"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","sourcesContent":["export default class Render {\n\n\tsplitByNumber(str, size) {\n\t  const numChunks = Math.ceil(str.length / size)\n\t  const chunks = new Array(numChunks)\n\n\t  for (let i = 0, o = 0; i < numChunks; ++i, o += size) {\n\t    chunks[i] = str.substr(o, size)\n\t  }\n\n\t  return chunks\n\t}\n\n\ttext(str, x, y, size, ctx, color= \"white\") {\n\t\tif (str.toString().length > 6 && parseInt(size) >= 10) {\n\t\t\tx -= 6\n\t\t}\n\t\tstr = str.toString().split(' ');\n\n\t\tctx.strokeStyle = color\n\t\tctx.font = size+\"px Comic Sans MS\";\n\t\t\n\t\tfor (let word in str) {\n\t\t\tctx.strokeText(str[word], x, y + (word * 7));\n\t\t}\n    }\n\n    textLine(str, x, y, size, ctx, color= \"white\") {\n\t\tif (str.toString().length > 6 && parseInt(size) >= 10) {\n\t\t\tx -= 6\n\t\t}\n\n\t\tctx.strokeStyle = color\n\t\tctx.font = size+\"px Comic Sans MS\";\n\t\t\n\t\tctx.strokeText(str, x, y);\n\t\t\n    }\n\n    textLinesByLength(str, x, y, size, numToSplit, ctx, color= \"white\") {\n    \tlet strChunks = this.splitByNumber(str, numToSplit);\n    \tctx.strokeStyle = color\n\t\tctx.font = size+\"px Comic Sans MS\";\n\t\t\n\t\tfor (let line in strChunks) {\n\t\t\tconsole.log(str[line] + \" newline\")\n\t\t\tctx.strokeText(str[line], x, y);\n\t\t}\n    }\n\n    img(img, x,y, width, height, ctx) {\n\t    ctx.drawImage(img.img, \n\t                  img.pos.x,\n\t                  img.pos.y, \n\t                  img.pos.width, \n\t                  img.pos.height,\n\t                  x,\n\t                  y,\n\t                  width,\n\t                  height\n\t                );\n\t}\n\n\troundRect(x, y, w, h, r, ctx) {\n\t\tctx.fillStyle = 'rgba(16, 133, 26,0.9)';\n\t  if (w < 2 * r) r = w / 2;\n\t  if (h < 2 * r) r = h / 2;\n\t  ctx.beginPath();\n\t  ctx.moveTo(x+r, y);\n\t  ctx.arcTo(x+w, y,   x+w, y+h, r);\n\t  ctx.arcTo(x+w, y+h, x,   y+h, r);\n\t  ctx.arcTo(x,   y+h, x,   y,   r);\n\t  ctx.arcTo(x,   y,   x+w, y,   r);\n\t  ctx.closePath();;\n\t}\n}"]},"metadata":{},"sourceType":"module"}