{"ast":null,"code":"import healthBar from \"../../Images/images/UI/healthBars/healthBar.png\";\nimport emptyBar from \"../../Images/images/UI/healthBars/emptyBar.png\";\nimport bankBackGround from \"../../Images/images/UI/bankBackGround.png\";\nimport Render from '../Canvas/Draw/Render';\nvar loadedImages = 0;\nlet loadImgs = {\n  health: {\n    img: singleImage(healthBar),\n    pos: mapTile(0, 0, 206, 28)\n  },\n  empty: {\n    img: singleImage(emptyBar),\n    pos: mapTile(0, 0, 206, 28)\n  },\n  bankBackGround: {\n    img: singleImage(bankBackGround),\n    pos: mapTile(0, 0, 300, 430)\n  }\n};\n\nfunction scale(value, x1, y1, x2, y2) {\n  return (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n}\n\nfunction mapTile(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n\nfunction singleImage(img) {\n  let image = new Image();\n  image.src = img;\n\n  image.onload = function () {\n    loadedImages++;\n    console.log(loadedImages);\n  };\n\n  return image;\n}\n\nexport default class LoadBar {\n  constructor() {\n    this.render = new Render();\n    this.loaded = false;\n  }\n\n  draw(canvas) {\n    this.render.img(loadImgs.empty, 130, 200, 200, 100, canvas.ctx);\n    this.render.img(loadImgs.empty, 130, 200, 200, 100, canvas.ctx);\n    let scaledLoadBar = scale(loadedImages, 0, 3085, 0, 200);\n    this.render.img(loadImgs.health, 135, 200, scaledLoadBar, 100, canvas.ctx);\n\n    if (loadedImages > 3050) {\n      this.loaded = true;\n    }\n  }\n\n}\nexport { singleImage };","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/idleForestV2/frontend/src/Components/LoadBar/index.js"],"names":["healthBar","emptyBar","bankBackGround","Render","loadedImages","loadImgs","health","img","singleImage","pos","mapTile","empty","scale","value","x1","y1","x2","y2","x","y","width","height","image","Image","src","onload","console","log","LoadBar","constructor","render","loaded","draw","canvas","ctx","scaledLoadBar"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iDAAtB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,cAAP,MAA2B,2CAA3B;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,IAAIC,YAAY,GAAG,CAAnB;AAEA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,MAAM,EAAE;AACJC,IAAAA,GAAG,EAAGC,WAAW,CAACR,SAAD,CADb;AAEJS,IAAAA,GAAG,EAAGC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,EAAZ;AAFT,GADG;AAMXC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,GAAG,EAAGC,WAAW,CAACP,QAAD,CADd;AAEHQ,IAAAA,GAAG,EAAGC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,EAAZ;AAFV,GANI;AAWXR,EAAAA,cAAc,EAAG;AACbK,IAAAA,GAAG,EAAGC,WAAW,CAACN,cAAD,CADJ;AAEbO,IAAAA,GAAG,EAAGC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ;AAFA;AAXN,CAAf;;AAiBA,SAASE,KAAT,CAAeC,KAAf,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;AAC9B,SAAQ,CAACJ,KAAK,GAAGC,EAAT,KAAgBG,EAAE,GAAGD,EAArB,KAA4BD,EAAE,GAAGD,EAAjC,IAAuCE,EAA/C;AACP;;AAID,SAASN,OAAT,CAAiBQ,CAAjB,EAAmBC,CAAnB,EAAqBC,KAArB,EAA2BC,MAA3B,EAAmC;AAC/B,SAAQ;AACJH,IAAAA,CAAC,EAACA,CADE;AAEJC,IAAAA,CAAC,EAACA,CAFE;AAGJC,IAAAA,KAAK,EAAGA,KAHJ;AAIJC,IAAAA,MAAM,EAAEA;AAJJ,GAAR;AAMH;;AAED,SAASb,WAAT,CAAqBD,GAArB,EAA0B;AACtB,MAAIe,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYjB,GAAZ;;AACAe,EAAAA,KAAK,CAACG,MAAN,GAAe,YAAW;AACtBrB,IAAAA,YAAY;AACZsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,YAAZ;AACH,GAHD;;AAIA,SAAOkB,KAAP;AACH;;AAED,eAAe,MAAMM,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,IAAI3B,MAAJ,EAAd;AACA,SAAK4B,MAAL,GAAc,KAAd;AACH;;AAEDC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACT,SAAKH,MAAL,CAAYvB,GAAZ,CAAgBF,QAAQ,CAACM,KAAzB,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoDsB,MAAM,CAACC,GAA3D;AACA,SAAKJ,MAAL,CAAYvB,GAAZ,CAAgBF,QAAQ,CAACM,KAAzB,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoDsB,MAAM,CAACC,GAA3D;AACA,QAAIC,aAAa,GAAGvB,KAAK,CAACR,YAAD,EAAe,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,EAA4B,GAA5B,CAAzB;AACA,SAAK0B,MAAL,CAAYvB,GAAZ,CAAgBF,QAAQ,CAACC,MAAzB,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C6B,aAA3C,EAA0D,GAA1D,EAA+DF,MAAM,CAACC,GAAtE;;AACA,QAAI9B,YAAY,GAAG,IAAnB,EAAyB;AACrB,WAAK2B,MAAL,GAAc,IAAd;AACH;AACJ;;AAdwB;AAmB7B,SAAQvB,WAAR","sourcesContent":["import healthBar from \"../../Images/images/UI/healthBars/healthBar.png\"\nimport emptyBar from \"../../Images/images/UI/healthBars/emptyBar.png\"\nimport bankBackGround from \"../../Images/images/UI/bankBackGround.png\"\n\nimport Render from '../Canvas/Draw/Render'\n\nvar loadedImages = 0;\n\nlet loadImgs = {\n    health: {\n        img : singleImage(healthBar),\n        pos : mapTile(0, 0, 206, 28) \n    },\n\n    empty: {\n        img : singleImage(emptyBar),\n        pos : mapTile(0, 0, 206, 28) \n    },\n\n    bankBackGround : {\n        img : singleImage(bankBackGround),\n        pos : mapTile(0, 0, 300, 430) \n    },\n}\n\nfunction scale(value, x1, y1, x2, y2) {\n        return ((value - x1) * (y2 - x2) / (y1 - x1) + x2)\n}\n\n\n\nfunction mapTile(x,y,width,height) {\n    return ({\n        x:x,\n        y:y,\n        width : width,\n        height: height,\n    })\n}\n\nfunction singleImage(img) {\n    let image = new Image();\n    image.src = img;\n    image.onload = function() {\n        loadedImages++;\n        console.log(loadedImages);\n    }\n    return image;\n}\n\nexport default class LoadBar {\n    constructor() {\n        this.render = new Render()\n        this.loaded = false;\n    }\n\n    draw(canvas) {\n        this.render.img(loadImgs.empty, 130, 200, 200, 100, canvas.ctx);\n        this.render.img(loadImgs.empty, 130, 200, 200, 100, canvas.ctx);\n        let scaledLoadBar = scale(loadedImages, 0, 3085, 0 , 200)\n        this.render.img(loadImgs.health, 135, 200, scaledLoadBar, 100, canvas.ctx);\n        if (loadedImages > 3050) {\n            this.loaded = true\n        }\n    }\n\n\n}\n\nexport {singleImage}\n"]},"metadata":{},"sourceType":"module"}