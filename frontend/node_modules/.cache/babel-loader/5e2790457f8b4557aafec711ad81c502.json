{"ast":null,"code":"var _jsxFileName = \"/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/index.js\";\nimport React from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport LoadBar from '../LoadBar';\nimport Draw from './Draw';\nimport InputHandler from '../InputHandlers';\nimport StartScreen from './Draw/UI/StartScreen';\nimport { Timer, userMessage } from './Helpers';\nlet socket = socketIOClient(process.env.REACT_APP_SOCKETURL);\n\nfunction isMobileDevice() {\n  return typeof window.orientation !== \"undefined\" || navigator.userAgent.indexOf('IEMobile') !== -1;\n}\n\n;\nexport default class Canvas extends React.Component {\n  constructor() {\n    super();\n\n    this.updateCanvas = () => {\n      if (this.frameRateTimer.check()) {\n        let canvas = this.getCanvas();\n        canvas.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (!this.loadBar.loaded) {\n          this.loadBar.draw(canvas);\n        } else if (this.StartScreen.start === false) {\n          this.StartScreen.run(canvas);\n        } else {\n          socket.emit('update');\n          let entities = {\n            currentPlayer: this.state.data.currentPlayer,\n            players: this.state.data.players,\n            enemies: this.state.data.enemies,\n            trees: this.state.data.trees,\n            ores: this.state.data.ores,\n            animals: this.state.data.animals,\n            npcs: this.state.data.npcs\n          };\n\n          if (entities.currentPlayer) {\n            entities.currentPlayer.mousePos = false;\n\n            if (this.state.mousePos) {\n              entities.currentPlayer.mousePos = this.state.mousePos;\n            }\n          }\n\n          this.Draw.Level.all(canvas, this.state.data.level, entities.currentPlayer);\n          this.Draw.Entity.draw(canvas, entities);\n          this.Draw.Entity.cornerHealthStats(canvas, entities.currentPlayer);\n          this.Draw.UserInterface.draw(canvas, entities.currentPlayer);\n          this.Draw.BottomPanel.buttons(canvas, entities.currentPlayer);\n          this.Draw.BottomInventoryIcons.draw(canvas);\n          this.userMessage.display(canvas.ctx);\n        }\n      }\n\n      this.rAF = requestAnimationFrame(this.updateCanvas);\n    };\n\n    this.state = {\n      data: false,\n      mousePos: false\n    };\n    this.canvasRef = React.createRef();\n    this.Draw = new Draw();\n    this.InputHandler = new InputHandler();\n    this.StartScreen = new StartScreen();\n    this.userMessage = userMessage();\n    this.loadBar = new LoadBar();\n    this.touchTimer = new Timer(800);\n    this.currentTouch = false;\n  }\n\n  componentDidMount() {\n    let frameRate = 25;\n    this.frameRateTimer = Timer(1000 / frameRate);\n    socket.on(\"game\", data => {\n      this.setState({\n        data: data\n      });\n    });\n    socket.on(\"disconnect\", data => {\n      this.StartScreen.reset();\n    });\n    socket.on(\"login\", data => {\n      this.StartScreen.loginEvent(data); // playSong(music.homeScreen, true)\n    });\n    socket.on(\"register\", data => {\n      this.StartScreen.registerEvent(data); // playSong(music.homeScreen, true)\n    });\n    socket.on(\"save\", data => {\n      this.userMessage.success(data);\n    });\n    socket.on(\"pause\", data => {\n      this.StartScreen.pause();\n      this.StartScreen.userMessage.clearWarning();\n    });\n    socket.on(\"logout\", data => {\n      this.StartScreen.logoutEvent(data);\n    });\n    this.updateCanvas();\n  }\n\n  getCanvas() {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    return {\n      canvas: canvas,\n      ctx: ctx,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      width: 480,\n      height: 480,\n      style: {\n        outline: \"none\",\n        borderRadius: 10,\n        padding: 0,\n        margin: \"auto\",\n        display: \"block\",\n        width: 480,\n        height: 480,\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        touchAction: \"manipulation\"\n      },\n      id: \"canvas\",\n      tabIndex: \"0\",\n      onKeyPress: e => {\n        let canvas = this.canvasRef.current;\n\n        if (this.StartScreen.start === false) {\n          this.StartScreen.onKeyPress(e);\n        }\n\n        this.InputHandler.KeyPress(e, canvas, socket);\n      },\n      onKeyDown: e => {\n        let canvas = this.canvasRef.current;\n\n        if (this.StartScreen.start === false) {\n          this.StartScreen.onKeyDown(e, socket);\n        }\n\n        this.InputHandler.KeyPress(e, canvas, socket);\n      },\n      onTouchStart: e => {\n        this.touchTimer.reset();\n        this.currentTouch = e.touches[0];\n      },\n      onTouchEnd: e => {\n        if (this.touchTimer.check()) {\n          let canvas = this.canvasRef.current;\n\n          if (this.currentTouch) {\n            this.InputHandler.RightClick(this.currentTouch, canvas, socket);\n          }\n        }\n      },\n      onContextMenu: e => {\n        e.preventDefault();\n        let canvas = this.canvasRef.current;\n        this.InputHandler.RightClick(e, canvas, socket);\n      },\n      onMouseMove: e => {\n        let canvas = this.canvasRef.current;\n        let click = this.InputHandler.transformedCoordinate(e, canvas);\n        this.setState({\n          mousePos: click\n        });\n        this.InputHandler.MouseMove(e, canvas, socket);\n      },\n      onClick: e => {\n        let canvas = this.canvasRef.current;\n        this.InputHandler.Click(e, canvas, socket);\n      },\n      onMouseDown: e => {\n        let canvas = this.canvasRef.current;\n        this.InputHandler.MouseDown(e, canvas, socket);\n      },\n      onMouseUp: e => {\n        let canvas = this.canvasRef.current;\n\n        if (this.StartScreen.start === false) {\n          this.StartScreen.onClick(e, canvas, socket);\n        }\n\n        this.InputHandler.MouseUp(e, canvas, socket);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/index.js"],"names":["React","socketIOClient","LoadBar","Draw","InputHandler","StartScreen","Timer","userMessage","socket","process","env","REACT_APP_SOCKETURL","isMobileDevice","window","orientation","navigator","userAgent","indexOf","Canvas","Component","constructor","updateCanvas","frameRateTimer","check","canvas","getCanvas","ctx","clearRect","width","height","loadBar","loaded","draw","start","run","emit","entities","currentPlayer","state","data","players","enemies","trees","ores","animals","npcs","mousePos","Level","all","level","Entity","cornerHealthStats","UserInterface","BottomPanel","buttons","BottomInventoryIcons","display","rAF","requestAnimationFrame","canvasRef","createRef","touchTimer","currentTouch","componentDidMount","frameRate","on","setState","reset","loginEvent","registerEvent","success","pause","clearWarning","logoutEvent","current","getContext","render","outline","borderRadius","padding","margin","position","top","bottom","left","right","touchAction","e","onKeyPress","KeyPress","onKeyDown","touches","RightClick","preventDefault","click","transformedCoordinate","MouseMove","Click","MouseDown","onClick","MouseUp"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport socketIOClient from \"socket.io-client\";\n\nimport LoadBar from '../LoadBar'\nimport Draw from './Draw'\nimport InputHandler from '../InputHandlers'\nimport StartScreen from './Draw/UI/StartScreen'\nimport {Timer, userMessage} from './Helpers'\nlet socket = socketIOClient(process.env.REACT_APP_SOCKETURL)\n\nfunction isMobileDevice() {\n    return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1);\n};\n\nexport default class Canvas extends React.Component {\n\n     constructor() {\n        super()\n\n        this.state = {\n          data : false,\n          mousePos : false,\n        };\n\n        this.canvasRef = React.createRef();\n        this.Draw = new Draw();\n        this.InputHandler = new InputHandler();\n        this.StartScreen = new StartScreen()\n        this.userMessage = userMessage();\n        this.loadBar = new LoadBar();\n        this.touchTimer= new Timer(800);\n        this.currentTouch = false;\n    }\n\n    componentDidMount() {\n        let frameRate = 25\n        this.frameRateTimer = Timer(1000 / frameRate);\n        \n        socket.on(\"game\", data => {\n            this.setState({data : data})\n        });\n\n        socket.on(\"disconnect\", data => {\n            this.StartScreen.reset();\n        });\n\n        socket.on(\"login\", data => {\n            this.StartScreen.loginEvent(data)\n            // playSong(music.homeScreen, true)\n        });\n\n        socket.on(\"register\", data => {\n            this.StartScreen.registerEvent(data)\n            // playSong(music.homeScreen, true)\n        });\n\n        socket.on(\"save\", data => {\n            this.userMessage.success(data)\n        })\n\n        socket.on(\"pause\", data => {\n            this.StartScreen.pause();\n            this.StartScreen.userMessage.clearWarning();\n        })\n\n        socket.on(\"logout\", data => {\n            this.StartScreen.logoutEvent(data)\n        })\n\n        this.updateCanvas();\n    }\n\n    getCanvas() {\n        const canvas = this.canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        \n        return {\n                canvas : canvas, \n                ctx: ctx,\n                width: canvas.width,\n                height: canvas.height,\n           };\n    }\n\n    updateCanvas = () => {\n        if (this.frameRateTimer.check()) {\n            \n            let canvas = this.getCanvas();\n            canvas.ctx.clearRect(0,0, canvas.width, canvas.height)\n            if (!this.loadBar.loaded) {\n                this.loadBar.draw(canvas)\n            }\n            else if (this.StartScreen.start === false) {\n                this.StartScreen.run(canvas);\n            } else {\n                socket.emit('update');\n                let entities = {\n                    currentPlayer : this.state.data.currentPlayer,\n                    players : this.state.data.players,\n                    enemies : this.state.data.enemies,\n                    trees : this.state.data.trees,\n                    ores : this.state.data.ores,\n                    animals : this.state.data.animals,\n                    npcs : this.state.data.npcs,\n                }\n\n                if (entities.currentPlayer) {\n                    entities.currentPlayer.mousePos = false\n                    if(this.state.mousePos) {\n                        entities.currentPlayer.mousePos = this.state.mousePos;\n                    }\n                }\n\n                this.Draw.Level.all(canvas, this.state.data.level, entities.currentPlayer);\n                this.Draw.Entity.draw(canvas, entities);\n                this.Draw.Entity.cornerHealthStats(canvas, entities.currentPlayer)\n                this.Draw.UserInterface.draw(canvas, entities.currentPlayer)\n                this.Draw.BottomPanel.buttons(canvas, entities.currentPlayer)\n                this.Draw.BottomInventoryIcons.draw(canvas)\n                this.userMessage.display(canvas.ctx)\n\n            }\n            \n        }\n        this.rAF = requestAnimationFrame(this.updateCanvas);\n\n    }\n\n    render() {\n         return (\n            <canvas ref={this.canvasRef}\n                    width={480} \n                    height={480}\n                    style={{   \n                                outline: \"none\",\n                                borderRadius:10,\n                                padding: 0,\n                                margin: \"auto\",\n                                display: \"block\",\n                                width: 480,\n                                height: 480,\n                                position: \"absolute\",\n                                top: 0,\n                                bottom: 0,\n                                left: 0,\n                                right: 0,\n                                touchAction:\"manipulation\"\n\n                            }}\n                    id = \"canvas\"\n                    tabIndex=\"0\" \n\n                    onKeyPress={ (e) => {\n                        let canvas = this.canvasRef.current\n                        if (this.StartScreen.start === false) {\n                            this.StartScreen.onKeyPress(e)\n                        } \n                        this.InputHandler.KeyPress(e, canvas, socket);\n                      } \n                    }\n\n                    onKeyDown={ (e) => {\n                        let canvas = this.canvasRef.current\n                        if (this.StartScreen.start === false) {\n                            this.StartScreen.onKeyDown(e, socket)\n                        } \n                        this.InputHandler.KeyPress(e, canvas, socket);\n                      } \n                    }\n\n                    onTouchStart = {(e) => {\n                        this.touchTimer.reset();\n                        this.currentTouch = e.touches[0];\n                      }\n                    }\n\n                    onTouchEnd = {(e) => {\n                        if (this.touchTimer.check()) {\n                            let canvas = this.canvasRef.current\n                            if (this.currentTouch) {\n                                this.InputHandler.RightClick(this.currentTouch, canvas, socket);\n                            }\n\n                        }\n                      }\n                    }\n\n                    onContextMenu = {(e) => {\n                        e.preventDefault()\n                        let canvas = this.canvasRef.current\n                        this.InputHandler.RightClick(e, canvas, socket);\n                      }\n                    }\n                    onMouseMove = {(e) => {\n\n                        let canvas = this.canvasRef.current\n                        let click = this.InputHandler.transformedCoordinate(e, canvas)\n                        this.setState({mousePos: click});\n                        this.InputHandler.MouseMove(e, canvas, socket)\n                      }\n                    }\n\n                    onClick = {(e) => {\n                        let canvas = this.canvasRef.current\n                        this.InputHandler.Click(e, canvas, socket)\n                      }\n                    }\n\n                    onMouseDown = {(e) => {\n                        let canvas = this.canvasRef.current\n                        this.InputHandler.MouseDown(e, canvas, socket);\n                      }\n                    }\n\n                    onMouseUp = {(e) => {\n                        let canvas = this.canvasRef.current\n                        if (this.StartScreen.start === false) {\n                            this.StartScreen.onClick(e, canvas, socket)\n                        } \n                        this.InputHandler.MouseUp(e, canvas, socket);\n                      }\n                    }\n            />\n\n         );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}