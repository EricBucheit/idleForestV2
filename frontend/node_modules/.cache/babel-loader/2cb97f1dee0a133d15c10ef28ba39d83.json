{"ast":null,"code":"import { farmImages, mapAtlas, buttons } from '../../../../../Images';\nimport itemImages from '../../../../../Images/itemImages';\nimport Render from '../../Render';\nimport { canvasMapOffset, canvasEntityOffset } from '../../../Helpers';\nexport default class Farm {\n  constructor() {\n    this.render = new Render();\n    this.y_start = 2;\n    this.x_start = 0;\n  }\n\n  draw(canvas, map, player) {\n    this.level(canvas, map);\n    this.farmPlot(canvas, player);\n    this.plants(canvas, player);\n    this.upgradeButton(canvas, player);\n  }\n\n  plants(canvas, player) {\n    let items = player.farm.items;\n\n    for (let item of items) {\n      if (item) {\n        let offset = canvasEntityOffset(player, item.body.pos.x, item.body.pos.y, canvas);\n        this.render.img(itemImages.growingPlants[item.img].img.getImg(item.level), offset.x, offset.y, item.body.size.x, item.body.size.y, canvas.ctx);\n      }\n    }\n  }\n\n  upgradeButton(canvas, player) {\n    let button_x = 280;\n    let button_y = 40;\n    let offset = canvasEntityOffset(player, button_x, button_y, canvas);\n    this.render.img(buttons.greenButton, offset.x, offset.y, 50, 25, canvas.ctx);\n    this.render.text(\"Upgrade\", offset.x + 7, offset.y + 14, \"9\", canvas.ctx);\n  }\n\n  farmPlot(canvas, player) {\n    let rows = player.farm.rows;\n    let columns = player.farm.columns;\n    let x_start = this.x_start * 32;\n    let x_end = (columns + this.x_start) * 32;\n    let y_start = this.y_start * 32;\n    let y_end = (rows + this.y_start + 1) * 32;\n    offsetStart = canvasEntityOffset(player, x_start, y_start, canvas);\n    this.render.text(`WATER:`, 120, 30, \"20\", canvas.ctx);\n    this.render.text(`${player.farm.water}`, 200, 30, \"20\", canvas.ctx);\n    this.render.img(farmImages.plot.leftTop, x_start, y_start, 32, 32, canvas.ctx);\n    this.render.img(farmImages.plot.rightTop, x_end, y_start, 32, 32, canvas.ctx);\n\n    for (let n = 0; n <= rows; n++) {\n      this.render.img(farmImages.plot.leftMiddle, x_start, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n      this.render.img(farmImages.plot.rightMiddle, x_end, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n    }\n\n    this.render.img(farmImages.plot.leftBottom, x_start, y_end, 32, 32, canvas.ctx);\n    this.render.img(farmImages.plot.rightBottom, x_end, y_end, 32, 32, canvas.ctx);\n\n    for (let x = 1; x < columns; x++) {\n      this.render.img(farmImages.plot.middleTop, x * 32, y_start, 32, 32, canvas.ctx);\n      this.render.img(farmImages.plot.middleBottom, x * 32, y_end, 32, 32, canvas.ctx);\n\n      for (let n = 0; n < rows; n++) {\n        this.render.img(farmImages.plot.middle, x * 32, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n      }\n    }\n  }\n\n  level(canvas, map) {\n    if (map) {\n      let level = map.body;\n\n      for (let x = level.pos.x; x <= level.size.x; x++) {\n        for (let y = level.pos.y; y <= level.size.y; y++) {\n          this.render.img(mapAtlas.terrain.grass.light.base.main, x * 32, y * 32, 32, 32, canvas.ctx);\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ericbucheit/Desktop/Projects/idleForestV2/frontend/src/Components/Canvas/Draw/Level/Farm/index.js"],"names":["farmImages","mapAtlas","buttons","itemImages","Render","canvasMapOffset","canvasEntityOffset","Farm","constructor","render","y_start","x_start","draw","canvas","map","player","level","farmPlot","plants","upgradeButton","items","farm","item","offset","body","pos","x","y","img","growingPlants","getImg","size","ctx","button_x","button_y","greenButton","text","rows","columns","x_end","y_end","offsetStart","water","plot","leftTop","rightTop","n","leftMiddle","rightMiddle","leftBottom","rightBottom","middleTop","middleBottom","middle","terrain","grass","light","base","main"],"mappings":"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","sourcesContent":["import {farmImages, mapAtlas, buttons} from '../../../../../Images'\nimport itemImages from '../../../../../Images/itemImages'\nimport Render from '../../Render'\nimport {canvasMapOffset, canvasEntityOffset} from '../../../Helpers'\n\nexport default class Farm {\n    \n    constructor() {\n        this.render = new Render()\n        this.y_start = 2;\n        this.x_start = 0;\n    }\n\n    draw(canvas, map, player) {\n        this.level(canvas,map)\n        this.farmPlot(canvas, player);\n        this.plants(canvas, player);\n        this.upgradeButton(canvas, player)\n    }\n\n    plants(canvas, player) {\n        let items = player.farm.items;\n        for (let item of items) {\n            if (item) {\n                let offset = canvasEntityOffset(player, item.body.pos.x, item.body.pos.y, canvas)\n                this.render.img(itemImages.growingPlants[item.img].img.getImg(item.level), offset.x, offset.y, item.body.size.x, item.body.size.y, canvas.ctx)\n            }\n        }\n    }\n\n    upgradeButton(canvas, player) {\n        let button_x = 280;\n        let button_y = 40;\n        let offset = canvasEntityOffset(player, button_x, button_y, canvas)\n\n        this.render.img(buttons.greenButton, offset.x, offset.y, 50, 25,canvas.ctx)\n        this.render.text(\"Upgrade\", offset.x + 7, offset.y + 14, \"9\" , canvas.ctx)\n    }\n\n    farmPlot(canvas, player) {\n        let rows = player.farm.rows;\n        let columns = player.farm.columns;\n\n        let x_start = this.x_start * 32;\n        let x_end = (columns + this.x_start) * 32\n\n        let y_start = this.y_start * 32;\n        let y_end = (rows + this.y_start + 1) * 32;\n\n\n        offsetStart = canvasEntityOffset(player, x_start, y_start, canvas);\n\n        this.render.text(`WATER:`, 120,30, \"20\", canvas.ctx)\n        this.render.text(`${player.farm.water}`, 200,30, \"20\", canvas.ctx)\n\n        this.render.img(farmImages.plot.leftTop, x_start, y_start, 32, 32, canvas.ctx);\n        this.render.img(farmImages.plot.rightTop, x_end, y_start, 32, 32, canvas.ctx);\n\n        for (let n = 0; n <= rows; n++) {\n            this.render.img(farmImages.plot.leftMiddle, x_start, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n            this.render.img(farmImages.plot.rightMiddle, x_end, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n        }\n\n        this.render.img(farmImages.plot.leftBottom, x_start, y_end, 32, 32, canvas.ctx);\n        this.render.img(farmImages.plot.rightBottom, x_end, y_end, 32, 32, canvas.ctx);\n        \n        for (let x = 1; x < columns; x++) {\n            this.render.img(farmImages.plot.middleTop, x * 32, y_start, 32, 32, canvas.ctx);\n            this.render.img(farmImages.plot.middleBottom, x * 32, y_end, 32, 32, canvas.ctx);\n            for (let n = 0; n < rows; n++) {\n                this.render.img(farmImages.plot.middle, x * 32, (this.y_start + n + 1) * 32, 32, 32, canvas.ctx);\n            }\n        }\n    }\n\n    level(canvas, map) {\n        if (map) {\n            let level = map.body;\n            for (let x = level.pos.x; x <= level.size.x; x++) {\n                for (let y = level.pos.y; y <= level.size.y; y++) {\n                    this.render.img(mapAtlas.terrain.grass.light.base.main, x * 32, y * 32, 32,32, canvas.ctx)\n                }\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}